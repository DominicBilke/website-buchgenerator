<?php
/**
 * Markdown to HTML Converter
 * Converts markdown text generated by ChatGPT to HTML for display
 */

class MarkdownConverter {
    
    /**
     * Convert markdown text to HTML
     * @param string $markdown The markdown text to convert
     * @return string The converted HTML
     */
    public static function convert($markdown) {
        if (empty($markdown)) {
            return '';
        }
        
        $html = $markdown;
        
        // Convert headers (h1-h6)
        $html = preg_replace('/^### (.*$)/m', '<h3>$1</h3>', $html);
        $html = preg_replace('/^## (.*$)/m', '<h2>$1</h2>', $html);
        $html = preg_replace('/^# (.*$)/m', '<h1>$1</h1>', $html);
        
        // Convert bold text
        $html = preg_replace('/\*\*(.*?)\*\*/s', '<strong>$1</strong>', $html);
        $html = preg_replace('/__(.*?)__/s', '<strong>$1</strong>', $html);
        
        // Convert italic text
        $html = preg_replace('/\*(.*?)\*/s', '<em>$1</em>', $html);
        $html = preg_replace('/_(.*?)_/s', '<em>$1</em>', $html);
        
        // Convert code blocks
        $html = preg_replace('/```(.*?)```/s', '<pre><code>$1</code></pre>', $html);
        $html = preg_replace('/`(.*?)`/s', '<code>$1</code>', $html);
        
        // Convert links
        $html = preg_replace('/\[([^\]]+)\]\(([^)]+)\)/', '<a href="$2">$1</a>', $html);
        
        // Convert unordered lists
        $html = preg_replace('/^[\s]*[-*+]\s+(.*$)/m', '<li>$1</li>', $html);
        $html = preg_replace('/(<li>.*<\/li>)/s', '<ul>$1</ul>', $html);
        
        // Convert ordered lists
        $html = preg_replace('/^[\s]*\d+\.\s+(.*$)/m', '<li>$1</li>', $html);
        $html = preg_replace('/(<li>.*<\/li>)/s', '<ul>$1</ul>', $html);
        
        // Convert blockquotes
        $html = preg_replace('/^>\s+(.*$)/m', '<blockquote>$1</blockquote>', $html);
        
        // Convert horizontal rules
        $html = preg_replace('/^---$/m', '<hr>', $html);
        $html = preg_replace('/^\*\*\*$/m', '<hr>', $html);
        
        // Convert line breaks (double space at end of line)
        $html = preg_replace('/  \n/', '<br>', $html);
        
        // Convert paragraphs (text between headers, lists, etc.)
        $html = self::convertParagraphs($html);
        
        // Clean up multiple line breaks
        $html = preg_replace('/\n\s*\n/', '</p><p>', $html);
        
        // Wrap in paragraph tags if not already wrapped
        if (!preg_match('/^<[a-z]/', trim($html))) {
            $html = '<p>' . $html . '</p>';
        }
        
        return $html;
    }
    
    /**
     * Convert text blocks to paragraphs
     * @param string $html The HTML to process
     * @return string The processed HTML
     */
    private static function convertParagraphs($html) {
        // Split by block elements
        $parts = preg_split('/(<h[1-6]>.*?<\/h[1-6]>|<ul>.*?<\/ul>|<ol>.*?<\/ol>|<blockquote>.*?<\/blockquote>|<pre>.*?<\/pre>|<hr>)/s', $html, -1, PREG_SPLIT_DELIM_CAPTURE);
        
        $result = '';
        foreach ($parts as $part) {
            $part = trim($part);
            if (empty($part)) continue;
            
            // If it's already a block element, keep it as is
            if (preg_match('/^<(h[1-6]|ul|ol|blockquote|pre|hr)/', $part)) {
                $result .= $part;
            } else {
                // Convert newlines to <br> tags and wrap in paragraph
                $part = str_replace("\n", '<br>', $part);
                if (!empty($part)) {
                    $result .= '<p>' . $part . '</p>';
                }
            }
        }
        
        return $result;
    }
    
    /**
     * Convert markdown content safely for display
     * @param string $markdown The markdown text
     * @return string Safe HTML content
     */
    public static function convertSafe($markdown) {
        // First convert markdown to HTML
        $html = self::convert($markdown);
        
        // Then escape any remaining HTML that shouldn't be there
        // But preserve the HTML tags we just created
        $html = htmlspecialchars($html, ENT_QUOTES, 'UTF-8');
        
        // Restore our HTML tags
        $html = str_replace(
            ['&lt;p&gt;', '&lt;/p&gt;', '&lt;h1&gt;', '&lt;/h1&gt;', '&lt;h2&gt;', '&lt;/h2&gt;', '&lt;h3&gt;', '&lt;/h3&gt;', 
             '&lt;strong&gt;', '&lt;/strong&gt;', '&lt;em&gt;', '&lt;/em&gt;', '&lt;code&gt;', '&lt;/code&gt;', '&lt;pre&gt;', '&lt;/pre&gt;',
             '&lt;a href=&quot;', '&lt;/a&gt;', '&lt;ul&gt;', '&lt;/ul&gt;', '&lt;ol&gt;', '&lt;/ol&gt;', '&lt;li&gt;', '&lt;/li&gt;',
             '&lt;blockquote&gt;', '&lt;/blockquote&gt;', '&lt;hr&gt;', '&lt;br&gt;'],
            ['<p>', '</p>', '<h1>', '</h1>', '<h2>', '</h2>', '<h3>', '</h3>',
             '<strong>', '</strong>', '<em>', '</em>', '<code>', '</code>', '<pre>', '</pre>',
             '<a href="', '</a>', '<ul>', '</ul>', '<ol>', '</ol>', '<li>', '</li>',
             '<blockquote>', '</blockquote>', '<hr>', '<br>'],
            $html
        );
        
        return $html;
    }
}
?> 